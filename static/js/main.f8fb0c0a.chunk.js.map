{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","change_city","city_name","document","getElementById","value","setState","input_city","state","temp","city","country","time_date","img","text","time","date","day","humidity","wind","pressure","title","a","fetch","this","response","console","log","ok","querySelector","style","visibility","json","data","month","c_time","Date","current","last_updated","hh","getHours","min","getMinutes","ss","getSeconds","dd","getDate","mm","getMonth","yy","getFullYear","cntry","location","temp_c","name","condition","icon","Number","localtime","slice","is_day","wind_kph","pressure_mb","forcast","id","type","placeholder","autoComplete","onChange","src","process","onClick","bind","className","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f8fb0c0a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css'\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      temp : '',\n      city : '',\n      country : '',\n      time_date : '',\n      img  :'',\n      text :'',\n      input_city : 'New Delhi',\n      time : '',\n      date : '',\n      day : '',\n      humidity : '',\n      wind : '',\n      pressure : ''\n    }\n    document.title = \"Weather App\";\n  }\n  change_city=()=>{\n    var city_name = document.getElementById('input').value;\n    this.setState({\n         input_city : city_name\n    })\n  }\n  \n  async forcast(){\n\n    var response = await fetch(`http://api.weatherapi.com/v1/current.json?key=762e9b045f8042f6b94112145211306&q=${this.state.input_city}&aqi=no`);\n    console.log(response.ok);\n    var err = document.querySelector('#error');\n    err.style.visibility = \"hidden\";\n    if(!(response.ok)){\n    //  alert('Enter the valid city name');\n\n    var err = document.querySelector('#error');\n    err.style.visibility = \"visible\";\n    var response = await fetch(`http://api.weatherapi.com/v1/current.json?key=762e9b045f8042f6b94112145211306&q=${'New Delhi'}&aqi=no`);\n   }\n   var data = await response.json();\n   var month = [\"Jan\",\"Fab\",\"Mar\",\"April\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\n   var day = ['Night','Day'];\n   var c_time =new Date(data.current.last_updated);\n   var hh = c_time.getHours();\n   var min = c_time.getMinutes();\n   var ss = c_time.getSeconds();\n   if(min===0){\n     min = '00'\n   }\n   if(ss===0){\n     ss = '00'\n   }\n   var dd = c_time.getDate();\n   var mm = c_time.getMonth();\n   var yy = c_time.getFullYear();\n   var cntry='';\n\n   if(data.location.country==='United States of America'){\n      cntry ='USA';\n   }else{\n     cntry = data.location.country;\n   }\n   \n   this.setState({\n     temp : data.current.temp_c,\n     city : data.location.name,\n     time_date : hh+\":\"+min+' '+month[mm]+' '+dd+','+yy,\n    //  time : data.current.last_updated,\n     img : data.current.condition.icon,\n     text : data.current.condition.text,\n     country : '('+cntry+')',\n     date : dd+\"/\"+Number(mm+1)+\"/\"+yy,\n     time : (data.location.localtime).slice(10),\n    //  time : hh+\":\"+min+\":\"+ss,\n     day  : day[data.current.is_day],\n     humidity : data.current.humidity,\n     wind : data.current.wind_kph+\" km/h\",\n     pressure : data.current.pressure_mb+\" mb\"\n   })\n  }\n  // fun=()=>{\n  //   var w  = window.innerWidth;\n  //   console.log(w);\n  //   this.setState({\n  //     width  : w\n  //   })\n  // }\n\n  componentDidMount(){\n    this.forcast();\n  }\n  render() {\n    return (\n      <div>\n        <div id=\"outer\">\n\n          <h1>Weather App</h1>\n          \n          <div id=\"get_city\">\n            <input type=\"text\" id=\"input\" placeholder=\"Enter city name\" autoComplete='ON' onChange={this.change_city}/>\n            <img src={process.env.PUBLIC_URL + \"./search.png\"} id=\"icon\" onClick={this.forcast.bind(this)}/>\n          </div>\n            <div id='error' style={{visibility:'hidden'}}>Invalid city name</div>\n\n          <div id=\"weather\">\n                <div id=\"info\"> \n                   <span className=\"img\"> <img src={this.state.img}/> </span> \n                   <span className=\"text\">{this.state.text}</span><br/>\n                   <span className=\"temp\">{this.state.temp}&deg;C</span>\n                   <span className=\"city\">{this.state.city}</span>\n                   <span className=\"country\">{this.state.country}</span>  <br/>\n                   <span className=\"time\">As of {this.state.time_date}</span>\n\n                </div>\n          \n                <div id=\"details\"> \n                   <h3> Current </h3>\n                      <table>\n                        <tr>\n                          <td>Date</td>\n                          <td>{this.state.date}</td>\n                        </tr>\n                        <tr>\n                          <td>Time</td>\n                          <td>{this.state.time}</td>\n                        </tr>\n                        <tr>\n                          <td>Day/Night</td>\n                          <td>{this.state.day}</td>\n                        </tr>\n                      </table> <br/> <hr/> <br/>\n                   <h3> Weather </h3>\n                      <table>\n                        <tr>\n                          <td>Humidity</td>\n                          <td>{this.state.humidity}</td>\n                        </tr>\n                        <tr>\n                          <td>Wind</td>\n                          <td>{this.state.wind}</td>\n                        </tr>\n                        <tr>\n                          <td>Pressure</td>\n                          <td>{this.state.pressure}</td>\n                        </tr>\n                      </table>\n                </div>\n                </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}